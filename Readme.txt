
User manual to use the programs in our repository.

************************************************************************************************
Purpose- Data cleaning:
C source code: 'data_cleaning.c'
Executable code: 'data_cleaning'
hh
i) What does it do?

   The code is used to remove all the non-acgt charaters including annotations and delimeters from a genome sequence. 

ii) System commands to do the task:

   To compile the source code 'data_cleaning.c':    $gcc data_cleaning.c -o data_cleaning -DMAX=0 
  
   (The option -DMAX=0 indicates acgt characters in the sequence are kept unchanged)

   To run the executable code 'data_cleaning':   $./data_cleaning Genome.fna Genome.fna.txt

   'Genome.fna' is input file. It contains raw genome sequence that includes the non-acgt characters, annotations and delimeters.
   
    The output will be stored in a file 'Genome.fna.txt' or any user specified filename, which will be the clean sequence containing only the acgt characters. 

Note: Cleaning genome sequence is mandatory for correct working of all other executables. 


****************************************************************************************************
Purpose- Computation of TRIM vectors 
C code: 'TRIM.c'
Executable code: 'TRIM'


i) What does it do?

   Transforms genomic sequences into their corresponding TRIM vectors. Here, we assume that all the genome sequences 
   have been cleaned by the 'data_cleaning' utility mentioned above.
 
ii)  System commands to do the task:

     To compile the source code 'TRIM.c':   $gcc TRIM.c -DMAX=3900000000 -lm -o TRIM

     (The option -DMAX indicates maximum length of genome the program will accomodate in RAM, which is presently 
     the maximum available genome length of the species taken from in NCBI repository under this study. 
     For any genome upto this length, user need not specify length of the experimenting sequence.)
 
     To run the executable code 'TRIM':  $./TRIM 
     
     A typical output instance of the executable 'TRIM'
     
     .............................................
     Enter motif/k-mer length: 7
     Enter the number of genomes to convert in TRIM vector: 4
     Input file name: Genome1.fna.txt
     Constructing TRIM vector for genome stored in file: Genome1.fna.txt
     Storing the TRIM vector in: TRIM_vector_Genome1.txt
     Input file name: Genome2.fna.txt
     Constructing TRIM vector for genome stored in file: Genome2.fna.txt
     Storing the TRIM vector in: TRIM_vector_Genome2.txt
     Input file name: Genome3.fna.txt
     Constructing TRIM vector for genome stored in file: Genome3.fna.txt
     Storing the TRIM vector in: TRIM_vector_Genome3.txt
     Input file name: Genome4.fna.txt
     Constructing TRIM vector for genome stored in file: Genome4.fna.txt
     Storing the TRIM vector in: TRIM_vector_Genome4.txt
     
     Note: The utility 'TRIM' automaically assigns the filename 'TRIM_vector_GenomeN.txt' and store the TRIM vector corresponding 
     to the N-th input genome into that file. However, the input filename can be any user specified filename that contains a
     cleaned genomic sequence. In other words, the utility 'TRIM' will store the TRIM vector for the first input genome into
     a file named TRIM_vector_Genome1.txt, the TRIM vector for the second input genome into a file named TRIM_vector_Genome2.txt 
     and so on. 
     
     
    

*******************************************************************************************************
Purpose- Application: Phylogeny construction


We have used the distance-matrix based phylogney. There are two major steps in computation of distance-matrix based phylogney 

a) Computation of distance matrix. 

 C code: 'TRIM_distance_matrix.c'
 Executable code: 'TRIM_distance_matrix'

i) What does it do?

   Computes TRIM distance matrix from a set of TRIM vectors. The TRIM vectors should be generated by using the utility 'TRIM'
   so that the files containing the TRIM vectors have the apropriate naming convention i.e., 'TRIM_vector_GenomeN.txt'. 
   
 
ii)  System commands to do the task

     To compile the source code 'TRIM_distance_matrix.c':   $gcc TRIM_distance_matrix.c -lm -o TRIM_distance_matrix

     To run the executable code 'TRIM_distance_matrix':   $./TRIM_distance_matrix
     
     A typial output instance of the executable 'TRIM_distance_matrix'
     ........................................
     Enter the number of TRIM vectors to construct TRIM distance matrix: 12
     TRIM distance matrix is written into filename: TRIM_distance_matrix.txt
     
     
b) Contruction of phylogeny tree using hierarchical clustering algorithm NJ from the distance matrix.

  In this step we have used MATLAB to costruct the phylogeny tree from the distance matrix stored in 'TRIM_distance_matrix.txt'.
  The following MATLAB script will load the TRIM distance matrix from file 'TRIM_distance_matrix.txt' into a MATLAB variable 'D'
  
  .........................................
  >>myfile = 'TRIM_distance_matrix.txt';
  >>text = fileread(myfile);
  >>arr_text = strsplit(text);
  >>x = char(arr_text); x_n = str2num(x); x_n = x_n';
  >>D = x_n; 
  ...........................................
  
  From the distance matrix stored in varable 'D' we can construct the phylogeny tree using NJ method as 
  
  .....................................
  >>phy = seqneighjoin(D,'equivar');
  .....................................
  
  To get the Newick format string of the phylogney tree we can use the following script
  .............................
  >>getnewickstr(phy)
  ............................
  
  From the newick formatted string we draw the phylogeny trees using MEGA 7.0. However, any other tools can be used.
  
  
************************************************************************************************************************************
Application: Taxa identification

C source code: 'TRIMEC.c'
Executable code: 'TRIMEC'

i) What does it do?

  It is used to identify the taxa of a given genome sequence and do not require any other information.
 
ii)  System commands to do the task 

 To compile the source code 'TRIMEC.c': $gcc TRIMEC.c -DMAX=38900000000 -lm -o TRIMEC
 
  (The option -DMAX indicates maximum length of genome the program will accomodate in RAM, which is presently 
     the maximum available genome length of the species taken from in NCBI repository under this study. 
     For any genome upto this length, user need not specify length of the experimenting sequence.)
 
 Note: Execution of TRIMEC depends on two training sets stored in the files 
 
 1. 'Bagging_classifier_at_k=7.txt' (contains training for TRIMEC-7)
 2. 'Bagging_classifier_at_k=6.txt' (contains training for TRIMEC-6)
 
 and two files containing the selected features used by TRIMEC.
 
 3. first_2500_feature.txt(used by TRIMEC-7)
 4. first_4000_feature.txt (used by TRIMEC-6)
 
 Based on maximization of H, TRIMEC loads either of this file to identify taxa of the given genome sequence. Thus these four files
 should be present in the same directory with the executable 'TRIMEC'. These files were generated while training the TRIMEC, hence
 shoule be available with 'TRIMEC'. 
 
 However, due to the constraints of 'Github' we are unable to upload the file 'Bagging_classifier_at_k=7.txt' as its size
 is greater than 25 MB limit. Thus, we have split the file 'Bagging_classifier_at_k=7.txt' into three files 'part1.txt',
 'part2.txt' and 'part3.txt' and have uploaded the files as 
 
 a) 'Bagging_classifier_at_k=6.txt'
 b) 'part1.txt'
 c) 'part2.txt'
 d) 'part3.txt'
 
 User need to use the following command before running the 'TRIMEC'
 
 $cat part1.txt part2.txt part3.txt > 'Bagging_classifier_at_k=7.txt'
 
 ***It is to be noted that the filenames should be 'Bagging_classifier_at_k=7.txt' and
 'Bagging_classifier_at_k=6.txt' for proper working of TRIMEC.
 
 
 To run the executable file 'TRIMEC': $./TRIMEC
 
 
 
*************************************************************************************************************************** 
C source code: 'TRES.c'
Executable code: 'TRES'
 
i) What does it do?

  To extract TRs of any motif length(k) user can use our in-house tool Tandem Repeat Extraction from Seed(TRES). 
  
 
ii)  System commands to do the task 

 To compile the source code 'TRES.c': $gcc TRES.c -DMAX=38900000000 -lm -o TRES
 
  (The option -DMAX indicates maximum length of genome the program will accomodate in RAM, which is presently 
     the maximum available genome length of the species taken from in NCBI repository under this study. 
     For any genome upto this length, user need not specify length of the experimenting sequence.)

To run the executable 'TRES'

$./TRES Genome.fna.txt -l 14 -k 7 > Result.txt

'Genome.fna.txt' contains aclean genome and the output i.e., extracted TRs of motif length k=7 nt with cutoff length = 14 nt will be stored 
in the file 'Result.txt'.

optiopns:
-l will indicate cutoff value, that is the minumum length of a TR instance 
-k will indicate the motif length in number of nucleotides

**********************************************************************************************************************************************

Note: All the programs are tested in Ubuntu
